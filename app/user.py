import json, os
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from .db import db
from .referral import ensure_user, set_referrers

load_dotenv()
OFFERS_PATH = os.getenv("OFFERS_PATH", "./data/offers.json")
router = Router()

# ------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ------------------------
def load_offers():
    with open(OFFERS_PATH, "r", encoding="utf-8") as f:
        j = json.load(f)
    flat = {}
    for c in j.get("categories", []):
        for o in c.get("offers", []):
            o["category"] = c["name"]
            flat[o["id"]] = o
    return j, flat

def cats_kb(cats):
    kb = InlineKeyboardBuilder()
    for c in cats:
        kb.button(text=c["name"], callback_data=f"cat:{c['name']}")
    # –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    kb.button(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite")
    kb.adjust(1)
    return kb.as_markup()

def offers_kb(cat, offs):
    kb = InlineKeyboardBuilder()
    for o in offs:
        kb.button(text=o["title"], callback_data=f"offer:{o['id']}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:cats")
    kb.adjust(1)
    return kb.as_markup()

async def get_ref_link(bot, user_id: int) -> str:
    bot_username = (await bot.get_me()).username
    return f"https://t.me/{bot_username}?start={user_id}"

# -------------
# –°–¢–ê–†–¢ / –ú–ï–ù–Æ
# -------------
@router.message(CommandStart(deep_link=True))
async def start_deeplink(m: Message):
    await ensure_user(m.from_user)
    # deep-link —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞
    ref = m.text.split(" ", 1)[1] if len(m.text.split(" ", 1)) > 1 else None
    if ref and ref.isdigit():
        await set_referrers(m.from_user.id, int(ref))
    await start(m)

@router.message(CommandStart())
async def start(m: Message):
    await ensure_user(m.from_user)
    data, _ = load_offers()
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ¬´–ö—É–ø–æ–Ω–∞—Ç–æ—Ä¬ª üéü\n"
        "–í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫—É–ø–æ–Ω–æ–≤ –∏–ª–∏ –∂–º–∏ /earn, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏.\n"
        "–¢–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –≤ /ref –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π ¬´üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π¬ª.",
        reply_markup=cats_kb(data.get("categories", []))
    )

@router.message(Command("promos"))
async def promos(m: Message):
    data, _ = load_offers()
    await m.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=cats_kb(data.get("categories", [])))

# --------------------
# –†–ï–§–ï–†–ê–õ–¨–ù–´–ï –•–ï–ù–î–õ–ï–†–´
# --------------------
@router.message(Command("ref"))
@router.message(Command("invite"))
async def ref_link(m: Message):
    await ensure_user(m.from_user)
    link = await get_ref_link(m.bot, m.from_user.id)

    # 1) –¢–µ–∫—Å—Ç
    await m.answer("üë• –í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:")

    # 2) –°—Å—ã–ª–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —É–¥–æ–±–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å/–ø–µ—Ä–µ—Å–ª–∞—Ç—å
    await m.answer(link)

    # 3) –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª
    kb = InlineKeyboardBuilder()
    kb.button(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=link)
    await m.answer("–£–¥–æ–±–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å üëá", reply_markup=kb.as_markup())

@router.callback_query(F.data == "invite")
async def invite_cb(c: CallbackQuery):
    # —Ç–æ—Ç –∂–µ —Å—Ü–µ–Ω–∞—Ä–∏–π, —á—Ç–æ –∏ /ref
    link = await get_ref_link(c.bot, c.from_user.id)
    await c.message.answer("üë• –í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:")
    await c.message.answer(link)
    kb = InlineKeyboardBuilder()
    kb.button(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=link)
    await c.message.answer("–£–¥–æ–±–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å üëá", reply_markup=kb.as_markup())
    await c.answer()

@router.message(Command("earn"))
async def earn(m: Message):
    uid = m.from_user.id
    await ensure_user(m.from_user)
    link = await get_ref_link(m.bot, uid)

    # –ë–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    async with db() as conn:
        cur = await conn.execute("SELECT amount FROM balances WHERE user_id=?", (uid,))
        row = await cur.fetchone()
        bal = row[0] if row else 0

        cur = await conn.execute("SELECT COUNT(*) FROM users WHERE ref1_id=?", (uid,))
        r1 = (await cur.fetchone())[0]

        cur = await conn.execute("SELECT COUNT(*) FROM users WHERE ref2_id=?", (uid,))
        r2 = (await cur.fetchone())[0]

    # 1) –°—Ç–∞—Ç–∞
    text = (
        "üí∏ *–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º*\n\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª—ã 1-–≥–æ —É—Ä–æ–≤–Ω—è: {r1}\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª—ã 2-–≥–æ —É—Ä–æ–≤–Ω—è: {r2}\n"
        f"–ë–∞–ª–∞–Ω—Å: {bal/100:.2f} ‚ÇΩ\n\n"
        "–ù–∏–∂–µ —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ üëá"
    )
    await m.answer(text, parse_mode="Markdown")

    # 2) –°—Å—ã–ª–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await m.answer(link)

    # 3) –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª
    kb = InlineKeyboardBuilder()
    kb.button(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", switch_inline_query=link)
    await m.answer("–£–¥–æ–±–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å üëá", reply_markup=kb.as_markup())

# ---------------
# –ù–ê–í–ò–ì–ê–¶–ò–Ø / –ö–ê–¢–ï–ì–û–†–ò–ò
# ---------------
@router.callback_query(F.data == "back:cats")
async def back_cats(c: CallbackQuery):
    data, _ = load_offers()
    await c.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=cats_kb(data.get("categories", [])))
    await c.answer()

@router.callback_query(F.data.startswith("cat:"))
async def open_cat(c: CallbackQuery):
    _, cat = c.data.split(":", 1)
    data, _ = load_offers()
    offs = []
    for group in data["categories"]:
        if group["name"] == cat:
            offs = [o for o in group["offers"] if o.get("active")]
            break
    await c.message.edit_text(f"{cat} ‚Äî –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=offers_kb(cat, offs))
    await c.answer()

@router.callback_query(F.data.startswith("offer:"))
async def open_offer(c: CallbackQuery):
    _, oid = c.data.split(":", 1)
    data, flat = load_offers()
    o = flat.get(oid)
    if not o or not o.get("active"):
        await c.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return

    kb = InlineKeyboardBuilder()
    if o["type"] == "cpa":
        # –í–ê–ñ–ù–û: base_url –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º –¥–æ–º–µ–Ω–æ–º (–±–µ–∑ –∑–∞–≥–ª—É—à–µ–∫ YOUR_CPA_LINK)
        url = f'{o["base_url"]}?sub1={c.from_user.id}'
        kb.button(text="–û—Ç–∫—Ä—ã—Ç—å —Å–∫–∏–¥–∫—É üîó", url=url)
    elif o["type"] == "coupon":
        kb.button(text=f"–ö—É–ø–∏—Ç—å –∑–∞ {o.get('price', 0)} ‚ÇΩ", callback_data=f"buy:{o['id']}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cat:{o['category']}")
    kb.adjust(1)
    await c.message.edit_text(f"üéü {o['title']}", reply_markup=kb.as_markup())
    await c.answer()

@router.callback_query(F.data.startswith("buy:"))
async def buy_coupon(c: CallbackQuery):
    _, oid = c.data.split(":", 1)
    data, flat = load_offers()
    o = flat.get(oid)
    if not o:
        await c.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞", show_alert=True)
        return
    price = int(o.get("price", 0))
    async with db() as conn:
        await conn.execute(
            "INSERT INTO purchases(buyer_id, offer_id, price, status) VALUES (?,?,?, 'pending')",
            (c.from_user.id, oid, price)
        )
        await conn.commit()
        cur = await conn.execute("SELECT last_insert_rowid()")
        pid = (await cur.fetchone())[0]

    # parse_mode=HTML –≤–∫–ª—é—á—ë–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ, –ø–æ—ç—Ç–æ–º—É —É–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ <code>
    await c.message.edit_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{pid} —Å–æ–∑–¥–∞–Ω–∞.\n"
        f"–°—É–º–º–∞: {price} ‚ÇΩ.\n\n"
        f"–û–ø–ª–∞—Ç–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥–æ–º (–°–ë–ü/–¢–∏–Ω—å–∫–æ—Ñ—Ñ/–°–±–µ—Ä). –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∏ –±–æ—Ç –≤—ã–¥–∞—Å—Ç –∫–æ–¥.\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–ª–∞–µ—Ç –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–æ–π /confirm {pid} <code>–ö–û–î</code>",
        parse_mode="HTML"
    )
    await c.answer()
